/**
 * Edge Editor Adapter - Adds an "Edit Connection" option to the right-click context menu for edges
 */
module.exports = function(RED) {
    "use strict";

    // Create an adapter to inject the editor script
    function EdgeEditorAdapter(config) {
        RED.nodes.createNode(this, config);
        var node = this;
        
        // We don't need to do anything in the runtime
        // The magic happens in the script we inject to the editor
    }
    
    RED.nodes.registerType("edge-editor-adapter", EdgeEditorAdapter);
    
    // Register the editor script that will add our custom behavior
    RED.hooks.add("editorTheme", {
        scripts: [
            // This will be dynamically injected into the editor
            "custom/js/edge-editor.js"
        ]
    });
    
    // Create the editor script that will add the "Edit Connection" option
    var fs = require('fs');
    var path = require('path');
    
    // Create the custom directory if it doesn't exist
    var customDir = path.join(__dirname, '..', '..', '..', '..', 'editor-client', 'public', 'custom', 'js');
    if (!fs.existsSync(path.join(customDir, '..'))) {
        fs.mkdirSync(path.join(customDir, '..'));
    }
    if (!fs.existsSync(customDir)) {
        fs.mkdirSync(customDir);
    }
    
    // Write the client-side script
    var scriptContent = `
/**
 * Edge Editor Script
 * This script adds an "Edit Connection" option to the right-click context menu for edges
 */
(function() {
    // Store the original context menu show function
    var originalContextMenuShow = RED.contextMenu.show;
    
    // Store any active edge conditions
    var edgeConditions = {};
    
    // Override the context menu show function
    RED.contextMenu.show = function(options) {
        // Check if we have selected links
        if (options.type === 'workspace') {
            var selection = RED.view.selection();
            var hasLinks = selection && selection.links && selection.links.length > 0;
            
            if (hasLinks) {
                // Create menu options if they don't exist
                if (!options.options) {
                    options.options = [];
                }

                // Add the Edit Connection option
                options.options.unshift({
                    label: "Edit Connection",
                    onselect: function() {
                        // Get the first selected link
                        var selectedLink = selection.links[0];
                        
                        // Get or create condition data for this link
                        var linkId = selectedLink.source.id + ':' + selectedLink.sourcePort + ':' + selectedLink.target.id;
                        if (!edgeConditions[linkId]) {
                            // Initialize with default values
                            edgeConditions[linkId] = {
                                property: "payload",
                                operator: "eq",
                                value: "",
                                valueType: "str",
                                enabled: false
                            };
                        }
                        
                        // Open edit dialog
                        showConnectionDialog(selectedLink, edgeConditions[linkId]);
                    }
                });
                
                // Add a separator
                options.options.unshift(null);
            }
        }
        
        // Call the original context menu show function
        return originalContextMenuShow(options);
    };
    
    // Add feature to edit connections via right-click on the link directly
    $(document).on('contextmenu', '.red-ui-flow-link', function(evt) {
        // Get the link data
        var linkData = d3.select(this).data()[0];
        
        if (linkData) {
            // Prevent default behavior
            evt.preventDefault();
            evt.stopPropagation();
            
            // Get or create condition data for this link
            var linkId = linkData.source.id + ':' + linkData.sourcePort + ':' + linkData.target.id;
            if (!edgeConditions[linkId]) {
                // Initialize with default values
                edgeConditions[linkId] = {
                    property: "payload",
                    operator: "eq",
                    value: "",
                    valueType: "str",
                    enabled: false
                };
            }
            
            // Create context menu options
            var menuOptions = [
                {
                    label: "Edit Connection",
                    onselect: function() {
                        showConnectionDialog(linkData, edgeConditions[linkId]);
                    }
                }
            ];
            
            // Show context menu
            RED.contextMenu.show({
                x: evt.clientX,
                y: evt.clientY,
                options: menuOptions
            });
            
            return false;
        }
    });
    
    // Create a simple dialog to edit connection conditions
    function showConnectionDialog(link, condition) {
        // Create dialog content
        var dialogContent = $('<div class="red-ui-edit-connection-dialog"></div>');
        
        // Create header and description
        dialogContent.append('<div style="margin-bottom:10px">Configure conditions for this connection:</div>');
        
        // Create form elements
        var formContainer = $('<div class="form-row"></div>').appendTo(dialogContent);
        var enabledContainer = $('<div class="form-row" style="margin-bottom:10px"></div>').appendTo(dialogContent);
        
        // Add enabled checkbox
        var enabledCheckbox = $('<input type="checkbox" id="node-edge-enabled" style="width:auto; margin-right:5px;">').appendTo(enabledContainer);
        $('<label for="node-edge-enabled">Enable conditional routing</label>').appendTo(enabledContainer);
        
        // Set initial enabled state
        enabledCheckbox.prop('checked', condition.enabled);
        
        // Create condition fields
        var conditionRow = $('<div class="form-row edge-condition-row"></div>').appendTo(dialogContent);
        
        // If condition is currently disabled, hide the condition row initially
        if (!condition.enabled) {
            conditionRow.hide();
        }
        
        // Create property field
        var propertyRow = $('<div class="form-row" style="margin-bottom:10px"></div>').appendTo(conditionRow);
        $('<label style="width:100px">Property</label>').appendTo(propertyRow);
        var propertyField = $('<input type="text" id="node-edge-property" style="width:70%">').appendTo(propertyRow);
        
        // Set initial property value
        propertyField.val(condition.property);
        
        // Create operator dropdown
        var operatorRow = $('<div class="form-row" style="margin-bottom:10px"></div>').appendTo(conditionRow);
        $('<label style="width:100px">Operator</label>').appendTo(operatorRow);
        var operatorField = $('<select id="node-edge-operator" style="width:70%"></select>').appendTo(operatorRow);
        
        // Add operator options
        var operators = [
            {value: "eq", label: "equals"},
            {value: "neq", label: "not equals"},
            {value: "lt", label: "less than"},
            {value: "lte", label: "less than or equal to"},
            {value: "gt", label: "greater than"},
            {value: "gte", label: "greater than or equal to"},
            {value: "contains", label: "contains"},
            {value: "startsWith", label: "starts with"},
            {value: "endsWith", label: "ends with"},
            {value: "regex", label: "matches regex"}
        ];
        
        // Add each operator to the dropdown
        operators.forEach(function(op) {
            operatorField.append('<option value="' + op.value + '">' + op.label + '</option>');
        });
        
        // Set initial operator value
        operatorField.val(condition.operator);
        
        // Create value field
        var valueRow = $('<div class="form-row" style="margin-bottom:10px"></div>').appendTo(conditionRow);
        $('<label style="width:100px">Value</label>').appendTo(valueRow);
        var valueField = $('<input type="text" id="node-edge-value" style="width:70%">').appendTo(valueRow);
        
        // Set initial value
        valueField.val(condition.value);
        
        // Add value type selector (using TypedInput if available)
        var valueTypeField;
        if (typeof RED.editor.typedInput !== 'undefined') {
            valueField.typedInput({
                default: condition.valueType || 'str',
                types: ['str', 'num', 'bool', 'json', 'msg', 'flow', 'global'],
                typeField: $('<input type="hidden" id="node-edge-value-type">').appendTo(valueRow)
            });
            
            // Set initial value type
            valueField.typedInput('type', condition.valueType || 'str');
        } else {
            // Fallback to simple select
            valueTypeField = $('<select id="node-edge-value-type" style="width:120px; margin-left:5px"></select>').appendTo(valueRow);
            
            // Add type options
            var types = [
                {value: "str", label: "String"},
                {value: "num", label: "Number"},
                {value: "bool", label: "Boolean"},
                {value: "json", label: "JSON"}
            ];
            
            // Add each type to the dropdown
            types.forEach(function(type) {
                valueTypeField.append('<option value="' + type.value + '">' + type.label + '</option>');
            });
            
            // Set initial value type
            valueTypeField.val(condition.valueType || 'str');
        }
        
        // Handle enabled checkbox change
        enabledCheckbox.change(function() {
            if ($(this).is(':checked')) {
                conditionRow.show();
            } else {
                conditionRow.hide();
            }
        });
        
        // Create the dialog
        RED.editor.editDialog({
            title: "Edit Connection",
            body: dialogContent,
            buttons: [
                {
                    id: "node-dialog-cancel",
                    text: "Cancel",
                    click: function() {
                        RED.editor.editDialogClosed();
                    }
                },
                {
                    id: "node-dialog-ok",
                    text: "Done",
                    class: "primary",
                    click: function() {
                        // Save the condition
                        condition.enabled = enabledCheckbox.prop('checked');
                        condition.property = propertyField.val();
                        condition.operator = operatorField.val();
                        condition.value = valueField.val();
                        
                        // Get value type
                        if (typeof RED.editor.typedInput !== 'undefined') {
                            condition.valueType = valueField.typedInput('type');
                        } else if (valueTypeField) {
                            condition.valueType = valueTypeField.val();
                        }
                        
                        // Close the dialog
                        RED.editor.editDialogClosed();
                        
                        // Update the link appearance to show it's conditional
                        updateLinkAppearance(link, condition);
                        
                        // Mark the workspace as dirty
                        RED.nodes.dirty(true);
                    }
                }
            ]
        });
    }
    
    // Update the link appearance based on whether it has conditions enabled
    function updateLinkAppearance(link, condition) {
        var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
        var linkElement = $('.red-ui-flow-link[id$="' + linkId + '"]');
        
        if (condition.enabled) {
            // Make the link dashed to show it's conditional
            linkElement.css('stroke-dasharray', '5,2');
            
            // Add a class for later reference
            linkElement.addClass('red-ui-conditional-link');
            
            // Store data on the link for evaluation
            link._condition = condition;
        } else {
            // Reset to solid line
            linkElement.css('stroke-dasharray', 'none');
            
            // Remove the class
            linkElement.removeClass('red-ui-conditional-link');
            
            // Remove the condition data
            delete link._condition;
        }
    }
    
    // Function to evaluate link conditions at runtime
    function evaluateCondition(msg, condition) {
        if (!condition || !condition.enabled) {
            return true; // No condition or disabled, allow the message
        }
        
        // Get the value from the message property
        var propertyValue;
        try {
            propertyValue = RED.utils.getMessageProperty(msg, condition.property);
        } catch(err) {
            console.error("Error getting property:", err);
            return false; // Property access failed
        }
        
        // Convert the condition value based on valueType
        var conditionValue = condition.value;
        if (condition.valueType === 'num') {
            conditionValue = Number(condition.value);
        } else if (condition.valueType === 'bool') {
            conditionValue = (condition.value === 'true');
        } else if (condition.valueType === 'json') {
            try {
                conditionValue = JSON.parse(condition.value);
            } catch(err) {
                console.error("Error parsing JSON:", err);
                return false; // JSON parsing failed
            }
        }
        
        // Evaluate the condition
        switch(condition.operator) {
            case 'eq':
                return propertyValue == conditionValue;
            case 'neq':
                return propertyValue != conditionValue;
            case 'lt':
                return propertyValue < conditionValue;
            case 'lte':
                return propertyValue <= conditionValue;
            case 'gt':
                return propertyValue > conditionValue;
            case 'gte':
                return propertyValue >= conditionValue;
            case 'contains':
                return String(propertyValue).indexOf(String(conditionValue)) !== -1;
            case 'startsWith':
                return String(propertyValue).startsWith(String(conditionValue));
            case 'endsWith':
                return String(propertyValue).endsWith(String(conditionValue));
            case 'regex':
                try {
                    var regex = new RegExp(conditionValue);
                    return regex.test(String(propertyValue));
                } catch(err) {
                    console.error("Invalid regex:", err);
                    return false; // Regex error
                }
            default:
                return true; // Unknown operator, allow by default
        }
    }
    
    // Hook into RED.events to evaluate conditions before sending messages
    var originalSend = RED.comms.send;
    RED.comms.send = function(msg) {
        // Check if this is a message going through links with conditions
        if (msg && msg.topic === 'message' && msg.data) {
            // Check if any links have conditions
            $('.red-ui-conditional-link').each(function() {
                var linkId = $(this).attr('id').split('_').pop();
                var condition = edgeConditions[linkId];
                
                if (condition && condition.enabled) {
                    // Evaluate the condition
                    var allow = evaluateCondition(msg.data, condition);
                    
                    if (!allow) {
                        // Don't send this message
                        return;
                    }
                }
            });
        }
        
        // Call the original send function
        originalSend.apply(this, arguments);
    };
    
    // Add custom CSS for conditional links
    $("<style>")
        .prop("type", "text/css")
        .html(\`
            .red-ui-conditional-link {
                stroke-dasharray: 5,2;
            }
            
            .red-ui-edit-connection-dialog {
                padding: 10px;
            }
        \`)
        .appendTo("head");
    
    // Notify on startup
    $(document).ready(function() {
        setTimeout(function() {
            RED.notify("Edge Editor Enabled", {
                type: "success",
                timeout: 3000
            });
        }, 1000);
    });
})();
`;
    
    // Write the script to the file system
    var scriptPath = path.join(customDir, 'edge-editor.js');
    fs.writeFileSync(scriptPath, scriptContent);
}; 