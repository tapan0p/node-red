/**
 * Conditional Edge Adapter - Automatically inserts conditional edge nodes between connections
 * This module hooks into the Node-RED editor to automatically insert conditional edge nodes
 */
module.exports = function(RED) {
    "use strict";

    // Create an adapter to override the addLink function in the editor client
    function ConditionalEdgeAdapter(config) {
        RED.nodes.createNode(this, config);
        var node = this;
        
        // We don't need to do anything in the runtime
        // The magic happens in the script we inject to the editor
    }
    
    RED.nodes.registerType("conditional-edge-adapter", ConditionalEdgeAdapter);
    
    // Register the editor script that will add our custom behavior
    RED.hooks.add("editorTheme", {
        scripts: [
            // This will be dynamically injected into the editor
            "custom/js/conditional-edge-auto-insert.js"
        ]
    });
    
    // Create the editor script that will override the addLink function
    var fs = require('fs');
    var path = require('path');
    
    // Create the custom directory if it doesn't exist
    var customDir = path.join(__dirname, '..', '..', '..', '..', 'editor-client', 'public', 'custom', 'js');
    if (!fs.existsSync(path.join(customDir, '..'))) {
        fs.mkdirSync(path.join(customDir, '..'));
    }
    if (!fs.existsSync(customDir)) {
        fs.mkdirSync(customDir);
    }
    
    // Write the client-side script
    var scriptContent = `
/**
 * Conditional Edge Auto Insert Script
 * This script automatically inserts conditional edge nodes between connections
 * and adds an "Edit Connection" option to the context menu
 */
(function() {
    // Store the original addLink function
    var originalAddLink = RED.nodes.addLink;
    
    // Override the addLink function to add our conditional edge logic
    RED.nodes.addLink = function(link) {
        // Don't intercept if the source or target is a link node, junction, or already a conditional edge
        if (!link || !link.source || !link.target || 
            link.source.type === "link out" || link.target.type === "link in" ||
            link.source.type === "junction" || link.target.type === "junction" ||
            link.source.type === "conditional-edge" || link.target.type === "conditional-edge" ||
            link.virtualLink) {
            // Just use the original function for these cases
            return originalAddLink(link);
        }
        
        // Create the conditional edge node
        var conditionalNodeDef = {
            id: RED.nodes.id(),
            type: "conditional-edge",
            property: "triplets",
            propertyType: "msg",
            rules: [{t:"eq", v:"", vt:"str"}],
            checkall: "true",
            target: "subject",
            targetValue: "",
            wires: [[]],
            d: true, // Mark as default to avoid showing its name
            w: 10, // Very small width
            h: 20, // Height
            _def: {
                defaults: {
                    label: { value: "\\u200B" } // Zero-width space
                },
                size: "small"
            },
            // Add custom styling to hide text
            style: { 
                label: false,
                labelPos: "hide" 
            }
        };
        
        // Calculate position between source and target
        var midX = (link.source.x + link.target.x) / 2;
        var midY = (link.source.y + link.target.y) / 2;
        
        // Set position of the conditional node
        conditionalNodeDef.x = midX;
        conditionalNodeDef.y = midY;
        
        // Set the same workspace as the source and target
        conditionalNodeDef.z = link.source.z;
        
        // Add the conditional node to the flow
        var conditionalNode = RED.nodes.add(conditionalNodeDef);
        RED.history.push({
            t: 'add',
            nodes: [conditionalNodeDef],
            dirty: RED.nodes.dirty()
        });
        
        // Create two new links: source -> conditionalNode and conditionalNode -> target
        var sourceToCondition = {
            source: link.source,
            sourcePort: link.sourcePort,
            target: conditionalNode
        };
        
        var conditionToTarget = {
            source: conditionalNode,
            sourcePort: 0,
            target: link.target
        };
        
        // Add the new links using the original function
        originalAddLink(sourceToCondition);
        originalAddLink(conditionToTarget);
        
        // Mark the flow as dirty to ensure changes are saved
        RED.nodes.dirty(true);
        RED.view.redraw(true);
        
        // Notify the user
        RED.notify("Conditional Edge Auto-Inserted", {
            type: "success",
            timeout: 2000
        });
        
        // Return the conditional node for any additional processing
        return conditionalNode;
    };
    
    // Add "Edit Connection" option to context menu
    // Store original context menu show function
    var originalContextMenuShow = RED.contextMenu.show;
    
    // Override the context menu show function
    RED.contextMenu.show = function(options) {
        // Check if we have a context menu for the workspace and if we have selected links
        if (options.type === 'workspace') {
            var selection = RED.view.selection();
            var hasLinks = selection && selection.links && selection.links.length > 0;
            
            if (hasLinks) {
                // Look for conditional edge nodes between the selected links
                var conditionalNodes = [];
                
                selection.links.forEach(function(link) {
                    // Check both source and target for conditional edge nodes
                    if (link.source && link.source.type === "conditional-edge") {
                        conditionalNodes.push(link.source);
                    }
                    if (link.target && link.target.type === "conditional-edge") {
                        conditionalNodes.push(link.target);
                    }
                });
                
                // Filter any duplicates
                conditionalNodes = conditionalNodes.filter(function(node, index, self) {
                    return self.indexOf(node) === index;
                });
                
                // If we have conditional nodes, add an "Edit Connection" option
                if (conditionalNodes.length > 0) {
                    // Create menu options if they don't exist
                    if (!options.options) {
                        options.options = [];
                    }
                    
                    // Add the Edit Connection option at the top
                    options.options.unshift({
                        label: "Edit Connection Conditions",
                        onselect: function() {
                            // Open the node editor for the first conditional edge
                            RED.editor.edit(conditionalNodes[0]);
                        }
                    });
                    
                    // Add a separator
                    options.options.unshift(null);
                }
            }
        }
        
        // Call the original context menu show function
        return originalContextMenuShow(options);
    };
    
    // Add feature to convert normal connections to conditional connections via context menu
    var originalCanvasContextMenu = $("#red-ui-workspace-chart").on('contextmenu');
    
    // Override the chart contextmenu event
    $("#red-ui-workspace-chart").on('contextmenu', function(evt) {
        // Get the element under the cursor
        var element = document.elementFromPoint(evt.clientX, evt.clientY);
        
        // Check if it's a wire/link
        if ($(element).closest('.red-ui-flow-link').length > 0) {
            // It's a wire - get the link data
            var linkData = d3.select(element).data()[0];
            
            if (linkData && !linkData.source.type.startsWith("conditional-edge") && !linkData.target.type.startsWith("conditional-edge")) {
                // It's a regular connection, not already involving a conditional edge
                // Prevent default behavior
                evt.preventDefault();
                evt.stopPropagation();
                
                // Create context menu options
                var menuOptions = [
                    {
                        label: "Add Conditional Edge",
                        onselect: function() {
                            // First remove the existing link
                            RED.nodes.removeLink(linkData);
                            
                            // Create a conditional edge node
                            var conditionalNodeDef = {
                                id: RED.nodes.id(),
                                type: "conditional-edge",
                                property: "triplets",
                                propertyType: "msg",
                                rules: [{t:"eq", v:"", vt:"str"}],
                                checkall: "true",
                                target: "subject",
                                targetValue: "",
                                wires: [[]],
                                w: 10,
                                h: 20,
                                z: linkData.source.z
                            };
                            
                            // Calculate position between source and target
                            conditionalNodeDef.x = (linkData.source.x + linkData.target.x) / 2;
                            conditionalNodeDef.y = (linkData.source.y + linkData.target.y) / 2;
                            
                            // Add the node
                            var conditionalNode = RED.nodes.add(conditionalNodeDef);
                            
                            // Create two new links
                            var sourceToCondition = {
                                source: linkData.source,
                                sourcePort: linkData.sourcePort,
                                target: conditionalNode
                            };
                            
                            var conditionToTarget = {
                                source: conditionalNode,
                                sourcePort: 0,
                                target: linkData.target
                            };
                            
                            // Add the new links
                            RED.nodes.addLink(sourceToCondition);
                            RED.nodes.addLink(conditionToTarget);
                            
                            // Push to history
                            RED.history.push({
                                t: 'add',
                                nodes: [conditionalNodeDef],
                                dirty: RED.nodes.dirty()
                            });
                            
                            // Redraw
                            RED.nodes.dirty(true);
                            RED.view.redraw(true);
                            
                            // Open the editor for the conditional node
                            setTimeout(function() {
                                RED.editor.edit(conditionalNode);
                            }, 100);
                        }
                    }
                ];
                
                // Show context menu
                RED.contextMenu.show({
                    x: evt.clientX,
                    y: evt.clientY,
                    options: menuOptions
                });
                
                return false;
            }
        }
        
        // Call the original handler
        return originalCanvasContextMenu.apply(this, arguments);
    });
    
    // Notify on startup
    $(document).ready(function() {
        $("<style>")
            .prop("type", "text/css")
            .html(\`
                /* Hide conditional edge node text completely */
                .red-ui-node[data-type="conditional-edge"] .red-ui-node-label,
                .red-ui-palette-node[data-type="conditional-edge"] .red-ui-palette-label,
                .red-ui-nodegroup[data-type="conditional-edge"] .red-ui-nodegroup-label,
                .node_label[data-type="conditional-edge"],
                .palette_label[data-type="conditional-edge"] { 
                    display: none !important; 
                    visibility: hidden !important;
                    opacity: 0 !important;
                    width: 0 !important;
                    height: 0 !important;
                    font-size: 0 !important;
                    position: absolute !important;
                    overflow: hidden !important;
                    clip: rect(0,0,0,0) !important;
                    margin: -1px !important;
                    padding: 0 !important;
                    border: 0 !important;
                }
                
                /* Make the node very small */
                .red-ui-node[data-type="conditional-edge"] {
                    width: 10px !important;
                    min-width: 10px !important;
                    height: 20px !important;
                    border-radius: 5px !important;
                    background-image: none !important;
                }
                
                /* Adjust the port positions for the small node */
                .red-ui-node[data-type="conditional-edge"] .red-ui-node-port {
                    top: 10px !important;
                }
                
                .red-ui-node[data-type="conditional-edge"] .red-ui-node-input {
                    left: -5px !important;
                }
                
                .red-ui-node[data-type="conditional-edge"] .red-ui-node-output {
                    right: -5px !important;
                }
                
                /* Override any possible label containers */
                .red-ui-node[data-type="conditional-edge"] * {
                    text-indent: -9999px !important;
                    font-size: 0 !important;
                }
            \`)
            .appendTo("head");

        setTimeout(function() {
            RED.notify("Conditional Edge Auto-Insert Enabled", {
                type: "success",
                timeout: 4000
            });
        }, 1000);
    });
})();
`;
    
    // Write the script to the file system
    var scriptPath = path.join(customDir, 'conditional-edge-auto-insert.js');
    fs.writeFileSync(scriptPath, scriptContent);
}; 