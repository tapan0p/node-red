RED.contextMenu = (function () {

    let menu;
    let edgeConditions = {};

    // Add a direct implementation of editDialog if it doesn't exist in RED.editor
    if (!RED.editor) {
        RED.editor = {};
    }
    
    if (!RED.editor.editDialog) {
        RED.editor.editDialog = function(options) {
            // Create a jQuery UI dialog with the provided options
            var dialogOptions = {
                modal: true,
                width: 'auto',
                height: 'auto',
                autoOpen: true,
                resizable: false,
                classes: options.dialogClass,
                title: options.title || "Dialog",
                open: options.open,
                close: options.beforeClose,
                position: options.position || { my: "center", at: "center", of: window }
            };
            
            // Create dialog container
            var dialog = $('<div></div>').appendTo('body');
            
            // Add content
            if (options.body) {
                options.body.appendTo(dialog);
            }
            
            // Add buttons if provided
            if (options.buttons && options.buttons.length > 0) {
                var buttons = {};
                options.buttons.forEach(function(btn) {
                    buttons[btn.id] = {
                        text: btn.text,
                        class: btn.class || '',
                        click: btn.click
                    };
                });
                dialogOptions.buttons = buttons;
            }
            
            // Initialize the dialog
            dialog.dialog(dialogOptions);
            
            return dialog;
        };
    }

    function showConnectionDialog(link, condition) {
        try {
            // Create dialog content with more node-like styling and fixed height with scrollbar
            var dialogContent = $('<div class="red-ui-edit-connection-dialog dialog-form" style="height: 60vh; overflow-y: auto; overflow-x: hidden; padding-right: 15px;"></div>');
            
            // Create header and description
            dialogContent.append('<div class="form-row" style="margin-bottom:15px"><i class="fa fa-route"></i> Configure triplet conditions for this connection.</div>');
            
            // Always enable the condition
            condition.enabled = true;
            
            // Ensure conditions array exists
            if (!condition.conditions) {
                condition.conditions = [];
                
                // Convert old single condition format to new multiple format if needed
                if (condition.tripletSubject || condition.tripletPredicate || condition.tripletObject) {
                    condition.conditions.push({
                        object: condition.tripletObject || '',
                        operator: 'eq',
                        value: '',
                        field: condition.tripletPredicate || '',
                        subject: condition.tripletSubject || ''
                    });
                }
            }
            
            // Logic selection (AND/OR)
            var logicRow = $('<div class="form-row" style="margin-bottom:15px"></div>').appendTo(dialogContent);
            $('<label style="width:100px">Logic</label>').appendTo(logicRow);
            var logicContainer = $('<div style="display:inline-block;"></div>').appendTo(logicRow);
            
            var andLogicRadio = $('<input type="radio" id="node-edge-logic-and" name="node-edge-logic" value="and" style="margin-right:5px;">').appendTo(logicContainer);
            $('<label for="node-edge-logic-and" style="margin-right:15px;">AND</label>').appendTo(logicContainer);
            
            var orLogicRadio = $('<input type="radio" id="node-edge-logic-or" name="node-edge-logic" value="or" style="margin-right:5px;">').appendTo(logicContainer);
            $('<label for="node-edge-logic-or">OR</label>').appendTo(logicContainer);
            
            // Set initial logic value
            if (condition.logic === 'or') {
                orLogicRadio.prop('checked', true);
            } else {
                // Default to AND
                andLogicRadio.prop('checked', true);
            }
            
            // Container for condition rows
            var conditionsContainer = $('<div id="triplet-conditions-container" style="max-height: 400px; overflow-y: auto; overflow-x: hidden; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 4px; padding: 10px;"></div>').appendTo(dialogContent);
            
            // Function to add a condition row
            function addConditionRow(conditionData) {
                var rowId = 'condition-row-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
                var conditionRow = $('<div class="form-row triplet-condition-row" style="margin-bottom:10px; padding: 8px; background-color: #f8f8f8; border-radius: 4px;" id="' + rowId + '"></div>').appendTo(conditionsContainer);
                
                // Create a flex container for the fields
                var fieldsContainer = $('<div style="display: flex; gap: 10px; align-items: center;"></div>').appendTo(conditionRow);
                
                // Subject field
                var subjectContainer = $('<div style="flex: 1;"></div>').appendTo(fieldsContainer);
                $('<label style="display:block; margin-bottom:3px;">Subject</label>').appendTo(subjectContainer);
                var subjectField = $('<input type="text" class="condition-subject" style="width:100%;">').appendTo(subjectContainer);
                subjectField.val(conditionData.subject || '');
                
                // Field/Predicate field
                var fieldContainer = $('<div style="flex: 1;"></div>').appendTo(fieldsContainer);
                $('<label style="display:block; margin-bottom:3px;">Predicate</label>').appendTo(fieldContainer);
                var fieldField = $('<input type="text" class="condition-field" style="width:100%;">').appendTo(fieldContainer);
                fieldField.val(conditionData.field || '');
                
                // Object field
                var objectContainer = $('<div style="flex: 1;"></div>').appendTo(fieldsContainer);
                $('<label style="display:block; margin-bottom:3px;">Object</label>').appendTo(objectContainer);
                var objectField = $('<input type="text" class="condition-object" style="width:100%;">').appendTo(objectContainer);
                objectField.val(conditionData.object || '');
                
                // Operator dropdown
                var operatorContainer = $('<div style="flex: 1;"></div>').appendTo(fieldsContainer);
                $('<label style="display:block; margin-bottom:3px;">Condition</label>').appendTo(operatorContainer);
                var operatorField = $('<select class="condition-operator" style="width:100%;"></select>').appendTo(operatorContainer);
            
            // Add operator options
            var operators = [
                {value: "eq", label: "equals"},
                {value: "neq", label: "not equals"},
                {value: "contains", label: "contains"},
                {value: "startsWith", label: "starts with"},
                {value: "endsWith", label: "ends with"},
                    {value: "exists", label: "exists"},
                    {value: "matches", label: "matches regex"}
            ];
            
            operators.forEach(function(op) {
                operatorField.append('<option value="' + op.value + '">' + op.label + '</option>');
            });
            
            // Set initial operator value
                operatorField.val(conditionData.operator || 'eq');
                
                // Value field
                var valueContainer = $('<div style="flex: 1;"></div>').appendTo(fieldsContainer);
                $('<label style="display:block; margin-bottom:3px;">Value</label>').appendTo(valueContainer);
                var valueField = $('<input type="text" class="condition-value" style="width:100%;">').appendTo(valueContainer);
                valueField.val(conditionData.value || '');
                
                // Delete button container
                var buttonContainer = $('<div style="align-self: flex-end; padding-bottom: 3px;"></div>').appendTo(fieldsContainer);
                var deleteButton = $('<button class="red-ui-button red-ui-button-small" style="background: #fff; color: #ca3838; border: 1px solid #ca3838;"><i class="fa fa-trash"></i></button>')
                    .appendTo(buttonContainer)
                    .click(function() {
                        $('#' + rowId).remove();
                    });
                
                return conditionRow;
            }
            
            // Add existing conditions
            if (condition.conditions && condition.conditions.length > 0) {
                condition.conditions.forEach(function(cond) {
                    addConditionRow(cond);
                });
            } else {
                // Add a default empty condition if none exist
                addConditionRow({});
            }
            
            // Add button for new condition
            var addButtonRow = $('<div class="form-row" style="margin-top:15px;"></div>').appendTo(dialogContent);
            var addButton = $('<button class="red-ui-button"><i class="fa fa-plus"></i> Add Condition</button>')
                .appendTo(addButtonRow)
                .click(function() {
                    addConditionRow({});
                });
            
            // Add explanation text
            var helpRow = $('<div class="form-row" style="margin-top:15px;"><div class="form-tips">Multiple conditions can be combined with AND/OR logic. Leave fields blank to match any value for that field.</div></div>').appendTo(dialogContent);
            
            // Create the dialog without buttons
            if (typeof RED.editor.editDialog === 'function') {
                // Create a function to save the changes
                function saveChanges() {
                    // Collect condition data from inputs
                    var newCondition = {
                        enabled: true,
                        useTriplets: true,
                        logic: $('input[name="node-edge-logic"]:checked').val() || 'and',
                        conditions: []
                    };
                    
                    $('.triplet-condition-row').each(function() {
                        var row = $(this);
                        newCondition.conditions.push({
                            subject: row.find('.condition-subject').val(),
                            field: row.find('.condition-field').val(),
                            object: row.find('.condition-object').val(),
                            operator: row.find('.condition-operator').val(),
                            value: row.find('.condition-value').val()
                        });
                    });
                    
                    // Save the link condition
                    var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
                    edgeConditions[linkId] = newCondition;
                    
                    // Update link appearance
                    updateLinkAppearance(link, newCondition);
                    
                    // Mark workspace as "dirty"
                    RED.nodes.dirty(true);
                    
                    // Save conditions to persistent storage
                    saveEdgeConditionsToFlow();
                    
                    // Notify user
                    RED.notify("Changes saved", "success");
                    
                    return newCondition;
                }
                
                // Setup dialog options
                var dialogOptions = {
                    title: "Configure Triplet Conditions",
                    body: dialogContent,
                    dialogClass: "red-ui-edit-connection-dialog-container",
                    position: { my: "center top", at: "center top+50", of: window },
                    beforeClose: function() {
                        // Auto-save changes when dialog is closed with X button
                        saveChanges();
                        return true;
                    },
                    buttons: [
                        {
                            id: "node-dialog-apply",
                            text: "Apply",
                            class: "red-ui-button primary",
                            click: function() {
                                saveChanges();
                                $(this).dialog("close");
                            }
                        },
                        {
                            id: "node-dialog-save",
                            text: "Save",
                            class: "red-ui-button",
                            click: function() {
                                saveChanges();
                            }
                        },
                        {
                            id: "node-dialog-cancel",
                            text: "Cancel",
                            click: function() {
                                $(this).dialog("close");
                            }
                        }
                    ]
                };
                
                // Create the dialog with jQuery UI directly
                var dialogContent = dialogOptions.body;
                delete dialogOptions.body;
                
                var dialog = $('<div></div>').appendTo('body');
                dialogContent.appendTo(dialog);
                
                dialog.dialog({
                    modal: true,
                    autoOpen: true,
                    width: 'auto',
                    title: dialogOptions.title,
                    classes: {
                        "ui-dialog": dialogOptions.dialogClass
                    },
                    position: dialogOptions.position,
                    buttons: [
                        {
                            text: "Apply",
                            id: "node-dialog-apply",
                            class: "red-ui-button primary",
                    click: function() {
                                saveChanges();
                                $(this).dialog("close");
                            }
                        },
                        {
                            text: "Save",
                            id: "node-dialog-save",
                            class: "red-ui-button",
                    click: function() {
                                saveChanges();
                            }
                        },
                        {
                            text: "Cancel",
                            id: "node-dialog-cancel",
                            click: function() {
                                $(this).dialog("close");
                            }
                        }
                    ],
                    close: function() {
                        if (dialogOptions.beforeClose) {
                            dialogOptions.beforeClose();
                        }
                        $(this).dialog('destroy').remove();
                    }
                });
                
                // Store reference for later access
                var dialogRef = {
                    dialog: function(action) {
                        if (action === "close") {
                            dialog.dialog("close");
                        }
                    }
                };
                return dialogRef;
            } else {
                // Fallback dialog using jQuery UI or custom modal
                tryCreateDialogWithFallbacks(dialogContent, condition, link, []);
            }
        } catch (error) {
            console.error("Error showing connection dialog:", error);
            RED.notify("Error showing connection dialog: " + error.toString(), "error");
        }
    }
    
    // Helper function to try various dialog creation methods
    function tryCreateDialogWithFallbacks(dialogContent, condition, link, buttons) {
        try {
            // Try jQuery UI Dialog if available
            console.log("Using jQuery UI dialog fallback");
            
            // Convert RED buttons to jQuery UI format
            var dialogButtons = buttons.map(function(btn) {
                return {
                    text: btn.text,
                    class: btn.class || '',
                    click: btn.click
                };
            });
            
            dialogContent.dialog({
                title: "Configure Triplet Conditions",
                modal: true,
                width: 800,
                height: window.innerHeight * 0.6,
                resizable: true,
                buttons: dialogButtons,
                position: { my: "center top", at: "center top+50", of: window },
                open: function() {
                    // Ensure content has scrollbars if needed
                    $(this).css({
                        'height': '60vh',
                        'max-height': '60vh',
                        'overflow-y': 'auto'
                    });
                }
            });
        } catch (error) {
            // Last resort: create a custom modal dialog
            console.error("Error creating jQuery UI dialog:", error);
            console.log("Using custom modal fallback");
            
            // Create a simple modal container
            var modalContainer = $('<div class="red-ui-edit-connection-dialog-container"></div>').css({
                'position': 'fixed',
                'top': 0,
                'left': 0,
                'right': 0,
                'bottom': 0,
                'background': 'rgba(0,0,0,0.7)',
                'z-index': 1000,
                'display': 'flex',
                'justify-content': 'center',
                'align-items': 'flex-start',
                'padding-top': '50px'
            }).appendTo('body');
            
            // Create the dialog box
            var modalDialog = $('<div></div>').css({
                'background': 'white',
                'border-radius': '5px',
                'padding': '20px',
                'max-width': '500px',
                'width': '100%',
                'box-shadow': '0 0 10px rgba(0,0,0,0.5)'
            }).appendTo(modalContainer);
            
            // Add title
            $('<h3>Edit Connection</h3>').css({
                'margin-top': 0,
                'margin-bottom': '20px'
            }).appendTo(modalDialog);
            
            // Add content
            dialogContent.appendTo(modalDialog);
            
            // Ensure tabs work correctly in custom dialog
            $('#connection-settings-tab').show();
            $('#connection-triplets-tab').hide();
            
            // Add buttons
            var buttonContainer = $('<div></div>').css({
                'text-align': 'right',
                'margin-top': '20px'
            }).appendTo(modalDialog);
            
            // Add buttons in reverse order so primary is on the right
            for (var i = buttons.length - 1; i >= 0; i--) {
                var btn = buttons[i];
                var btnElement = $('<button>' + btn.text + '</button>').css({
                    'margin-left': '10px',
                    'padding': '8px 15px'
                });
                
                if (btn.class === 'primary') {
                    btnElement.css({
                        'background': '#a6bbcf',
                        'color': 'white',
                        'border': 'none',
                        'border-radius': '3px',
                        'font-weight': 'bold'
                    });
                }
                
                // Use IIFE to capture the current button's click handler
                (function(clickHandler) {
                    btnElement.click(function() {
                        clickHandler();
                        modalContainer.remove();
                    });
                })(btn.click);
                
                btnElement.appendTo(buttonContainer);
            }
            
            // Close when clicking outside
            modalContainer.click(function(event) {
                if (event.target === modalContainer[0]) {
                    modalContainer.remove();
                }
            });
        }
    }
    
    // Update the link appearance based on whether it has conditions enabled
    function updateLinkAppearance(link, condition) {
        var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
        var linkElement = $('.red-ui-flow-link[id$="' + linkId + '"]');
        
        if (condition.enabled) {
            // Make the link dashed to show it's conditional
            linkElement.css('stroke-dasharray', '5,2');
            
            // Add a class for later reference
            linkElement.addClass('red-ui-conditional-link');
            
            // Store data on the link for evaluation
            link._condition = condition;
        } else {
            // Reset to solid line
            linkElement.css('stroke-dasharray', 'none');
            
            // Remove the class
            linkElement.removeClass('red-ui-conditional-link');
            
            // Remove the condition data
            delete link._condition;
        }
    }

    // Evaluate a condition against a message
    function evaluateCondition(condition, msg) {
        if (!condition || !condition.enabled) {
            return true; // If condition is disabled, always pass
        }
        
        // Check for triplet conditions first
        if (condition.useTriplets && msg.triplets && Array.isArray(msg.triplets)) {
            return evaluateTripletCondition(condition, msg.triplets);
        }
        
        // Get property value using RED.utils.getMessageProperty if available
        var propertyValue;
        if (typeof RED.utils.getMessageProperty === 'function') {
            propertyValue = RED.utils.getMessageProperty(msg, condition.property);
        } else {
            // Simple property getter as fallback
            propertyValue = msg[condition.property];
        }
        
        // Convert the target value based on its type
        var targetValue = condition.value;
        switch (condition.valueType) {
            case 'num':
                targetValue = Number(targetValue);
                break;
            case 'bool':
                targetValue = (targetValue === 'true' || targetValue === true);
                break;
            case 'json':
                try {
                    targetValue = JSON.parse(targetValue);
                } catch(e) {
                    // Keep as string if JSON parsing fails
                }
                break;
        }
        
        // Evaluate based on operator
        switch (condition.operator) {
            case 'eq':
                return propertyValue == targetValue;
            case 'neq':
                return propertyValue != targetValue;
            case 'lt':
                return propertyValue < targetValue;
            case 'lte':
                return propertyValue <= targetValue;
            case 'gt':
                return propertyValue > targetValue;
            case 'gte':
                return propertyValue >= targetValue;
            case 'contains':
                return String(propertyValue).includes(String(targetValue));
            case 'startsWith':
                return String(propertyValue).startsWith(String(targetValue));
            case 'endsWith':
                return String(propertyValue).endsWith(String(targetValue));
            case 'regex':
                try {
                    var regex = new RegExp(targetValue);
                    return regex.test(String(propertyValue));
                } catch(e) {
                    return false;
                }
            default:
                return true;
        }
    }
    
    // Evaluate a triplet-specific condition
    function evaluateTripletCondition(condition, triplets) {
        // If no triplets, the condition fails
        if (!triplets || !Array.isArray(triplets) || triplets.length === 0) {
            return false;
        }
        
        // Handle multiple conditions with AND/OR logic
        if (condition.conditions && condition.conditions.length > 0) {
            // For each condition, check if it matches any triplet
            var results = condition.conditions.map(function(cond) {
                // If all fields are empty, this condition is always true
                if (!cond.subject && !cond.field && !cond.object && !cond.value) {
                    return true;
                }
                
                // Check each triplet against this condition
                for (var i = 0; i < triplets.length; i++) {
                    var triplet = triplets[i];
                    
                    // Skip invalid triplets
                    if (!triplet || typeof triplet !== 'object') {
                        continue;
                    }
                    
                    // Check if this triplet matches the condition
                    if (matchesTripletCondition(triplet, cond)) {
                        return true;
                    }
                }
                
                // No matches found for this condition
                return false;
            });
            
            // Apply logic (AND/OR)
            if (condition.logic === 'or') {
                // OR logic - any true result passes
                return results.some(function(result) { return result === true; });
            } else {
                // AND logic (default) - all results must be true
                return results.every(function(result) { return result === true; });
            }
        }
        
        // Fallback for old-style single condition format
        var subject = condition.tripletSubject;
        var predicate = condition.tripletPredicate;
        var object = condition.tripletObject;
        
        // Empty condition matches any triplet
        if (!subject && !predicate && !object) {
            return true;
        }
        
        // Check if any triplet matches the condition
        for (var i = 0; i < triplets.length; i++) {
            var triplet = triplets[i];
            
            // Skip invalid triplets
            if (!triplet || typeof triplet !== 'object') {
                continue;
            }
            
            // Check subject (if specified)
            if (subject && triplet.subject !== subject) {
                continue;
            }
            
            // Check predicate (if specified)
            if (predicate && triplet.predicate !== predicate) {
                continue;
            }
            
            // Check object (if specified)
            if (object && triplet.object !== object) {
                continue;
            }
            
            // If we got here, all specified conditions match
            return true;
        }
        
        // No matching triplet found
        return false;
    }
    
    // Helper function to check if a triplet matches a single condition
    function matchesTripletCondition(triplet, condition) {
        // Check subject (if specified)
        if (condition.subject && triplet.subject !== condition.subject) {
            return false;
        }
        
        // Check predicate/field (if specified)
        if (condition.field && triplet.predicate !== condition.field) {
            return false;
        }
        
        // Get the object value to check against
        var objectValue = triplet.object;
        
        // If object field is specified, only proceed if it matches
        if (condition.object && objectValue !== condition.object) {
            return false;
        }
        
        // If we have a value to check against and an operator
        if (condition.value !== undefined && condition.value !== "" && condition.operator) {
            // Evaluate based on operator
            switch (condition.operator) {
                case 'eq':
                    return objectValue == condition.value;
                case 'neq':
                    return objectValue != condition.value;
                case 'contains':
                    return String(objectValue).includes(String(condition.value));
                case 'startsWith':
                    return String(objectValue).startsWith(String(condition.value));
                case 'endsWith':
                    return String(objectValue).endsWith(String(condition.value));
                case 'exists':
                    return objectValue !== undefined && objectValue !== null && objectValue !== "";
                case 'matches':
                    try {
                        var regex = new RegExp(condition.value);
                        return regex.test(String(objectValue));
                    } catch(e) {
                        return false;
                    }
                default:
                    return true;
            }
        }
        
        // If we got here and haven't returned false, the condition is satisfied
        return true;
    }
    
    // Save edge conditions to flow configuration
    function saveEdgeConditionsToFlow() {
        RED.settings.set('edgeConditions', edgeConditions);
    }
    
    // Load edge conditions from flow configuration
    function loadEdgeConditionsFromFlow() {
        var savedConditions = RED.settings.get('edgeConditions');
        if (savedConditions) {
            edgeConditions = savedConditions;
            
            // Apply conditions to links
            RED.nodes.eachLink(function(link) {
                var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
                if (edgeConditions[linkId]) {
                    updateLinkAppearance(link, edgeConditions[linkId]);
                }
            });
        }
    }
    
    // Apply conditions when messages are sent through links
    function setupConditionalWiring() {
        // Store the original RED.nodes.addLink function
        var originalAddLink = RED.nodes.addLink;
        
        // Override RED.nodes.addLink to add condition evaluation
        RED.nodes.addLink = function(link) {
            // Call the original function
            var result = originalAddLink.apply(this, arguments);
            
            // Get the link ID
            var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
            
            // If this link has a condition, store it on the link object
            if (edgeConditions[linkId] && edgeConditions[linkId].enabled) {
                link._condition = edgeConditions[linkId];
                
                // Update the link appearance
                updateLinkAppearance(link, edgeConditions[linkId]);
            }
            
            return result;
        };
        
        // Hook into the Node-RED runtime to evaluate conditions
        // This will be loaded when the flow is deployed
        RED.comms.subscribe("edge-condition-evaluate", function(topic, msg) {
            var linkId = msg.linkId;
            var condition = edgeConditions[linkId];
            var result = evaluateCondition(condition, msg.msg);
            
            // Send the result back to the runtime
            RED.comms.publish("edge-condition-result", {
                linkId: linkId,
                result: result,
                msgId: msg.msgId
            });
        });
    }

    function disposeMenu() {
        $(document).off("mousedown.red-ui-workspace-context-menu");
        if (menu) {
            menu.remove();
        }
        menu = null;
    }
    function show(options) {
        if (menu) {
            menu.remove()
        }
        let menuItems = []
        if (options.options) {
            menuItems = options.options
        } else if (options.type === 'workspace') {
            const selection = RED.view.selection()
            const noSelection = !selection || Object.keys(selection).length === 0
            const hasSelection = (selection.nodes && selection.nodes.length > 0);
            const hasMultipleSelection = hasSelection && selection.nodes.length > 1;
            const virtulLinks = (selection.links && selection.links.filter(e => !!e.link)) || [];
            const wireLinks = (selection.links && selection.links.filter(e => !e.link)) || [];
            const hasLinks = wireLinks.length > 0;
            const isSingleLink = !hasSelection && hasLinks && wireLinks.length === 1
            const isMultipleLinks = !hasSelection && hasLinks && wireLinks.length > 1
            const canDelete = hasSelection || hasLinks
            const isGroup = hasSelection && selection.nodes.length === 1 && selection.nodes[0].type === 'group'
            const canEdit = !RED.workspaces.isLocked()
            const canRemoveFromGroup = hasSelection && !!selection.nodes[0].g
            
            // ADD EDIT CONNECTION OPTION FOR LINKS
            if (hasLinks) {
                // Add the Edit Connection option at the top of the menu
                menuItems.push(
                    {
                        label: "Edit Connection",
                        onselect: function() {
                            try {
                                // Get the selected link
                                var selectedLink = wireLinks[0];
                                
                                // Get the link ID
                                var linkId = selectedLink.source.id + ':' + selectedLink.sourcePort + ':' + selectedLink.target.id;
                                
                                // Get or create the condition data
                                if (!edgeConditions[linkId]) {
                                    edgeConditions[linkId] = {
                                        property: "payload",
                                        operator: "eq",
                                        value: "",
                                        valueType: "str",
                                        enabled: false
                                    };
                                }
                                
                                console.log("Showing connection dialog for link:", linkId);
                                
                                // Show the dialog directly using the RED.editConnection function
                                setTimeout(function() {
                                    RED.editConnection(selectedLink);
                                }, 100);
                            } catch(err) {
                                console.error("Error opening connection dialog:", err);
                                RED.notify("Error opening connection dialog: " + err.toString(), "error");
                            }
                        }
                    }
                );
                // Add a separator
                menuItems.push(null);
            }
            
            let hasGroup, isAllGroups = true, hasDisabledNode, hasEnabledNode, hasLabeledNode, hasUnlabeledNode;
            if (hasSelection) {
                const nodes = selection.nodes.slice();
                while (nodes.length) {
                    const n = nodes.shift();
                    if (n.type === 'group') {
                        hasGroup = true;
                        nodes.push(...n.nodes);
                    } else {
                        isAllGroups = false;
                        if (n.d) {
                            hasDisabledNode = true;
                        } else {
                            hasEnabledNode = true;
                        }
                    }
                    if (n.l === undefined || n.l) {
                        hasLabeledNode = true;
                    } else {
                        hasUnlabeledNode = true;
                    }
                }
            }

            const scale = RED.view.scale()
            const offset = $("#red-ui-workspace-chart").offset()
            let addX = (options.x - offset.left + $("#red-ui-workspace-chart").scrollLeft()) / scale
            let addY = (options.y - offset.top + $("#red-ui-workspace-chart").scrollTop()) / scale

            if (RED.view.snapGrid) {
                const gridSize = RED.view.gridSize()
                addX = gridSize * Math.round(addX / gridSize)
                addY = gridSize * Math.round(addY / gridSize)
            }

            if (RED.settings.theme("menu.menu-item-action-list", true)) {
                menuItems.push(
                    { onselect: 'core:show-action-list', label: RED._("contextMenu.showActionList"), onpostselect: function () { } }
                )
            }
            const insertOptions = []
            menuItems.push({ label: RED._("contextMenu.insert"), options: insertOptions })
            insertOptions.push(
                {
                    label: RED._("contextMenu.node"),
                    onselect: function () {
                        RED.view.showQuickAddDialog({
                            position: [addX, addY],
                            touchTrigger: 'ontouchstart' in window,
                            splice: isSingleLink ? selection.links[0] : undefined,
                            // spliceMultiple: isMultipleLinks
                        })
                    },
                    disabled: !canEdit
                },
                (hasLinks) ? { // has least 1 wire selected
                    label: RED._("contextMenu.junction"),
                    onselect: function () {
                        RED.actions.invoke('core:split-wires-with-junctions', { x: addX, y: addY })
                    },
                    disabled: !canEdit || !hasLinks
                } : {
                    label: RED._("contextMenu.junction"),
                    onselect: function () {
                        const nn = {
                            _def: { defaults: {} },
                            type: 'junction',
                            z: RED.workspaces.active(),
                            id: RED.nodes.id(),
                            x: addX,
                            y: addY,
                            w: 0, h: 0,
                            outputs: 1,
                            inputs: 1,
                            dirty: true,
                            moved: true
                        }
                        const junction = RED.nodes.addJunction(nn);
                        const historyEvent = {
                            dirty: RED.nodes.dirty(),
                            t: 'add',
                            junctions: [junction]
                        }
                        RED.history.push(historyEvent);
                        RED.nodes.dirty(true);
                        RED.view.select({nodes: [junction] });
                        RED.view.redraw(true)
                    },
                    disabled: !canEdit
                },
                {
                    label: RED._("contextMenu.linkNodes"),
                    onselect: 'core:split-wire-with-link-nodes',
                    disabled: !canEdit || !hasLinks
                },
                null
            )
            if (RED.settings.theme("menu.menu-item-import-library", true)) {
                insertOptions.push(
                    { onselect: 'core:show-import-dialog', label: RED._('common.label.import')},
                    { onselect: 'core:show-examples-import-dialog', label: RED._('menu.label.importExample') }
                )
            }


            if (hasSelection && canEdit) {
                const nodeOptions = []
                if (!hasMultipleSelection && !isGroup) {
                    nodeOptions.push(
                        { onselect: 'core:show-node-help', label: RED._('menu.label.showNodeHelp') },
                        null
                    )
                }
                nodeOptions.push(
                    { onselect: 'core:enable-selected-nodes', label: RED._('menu.label.enableSelectedNodes'), disabled: !hasDisabledNode },
                    { onselect: 'core:disable-selected-nodes', label: RED._('menu.label.disableSelectedNodes'), disabled: !hasEnabledNode },
                    null,
                    { onselect: 'core:show-selected-node-labels', label: RED._('menu.label.showSelectedNodeLabels'), disabled: !hasUnlabeledNode },
                    { onselect: 'core:hide-selected-node-labels', label: RED._('menu.label.hideSelectedNodeLabels'), disabled: !hasLabeledNode }
                )
                menuItems.push({
                    label: RED._('sidebar.info.node'),
                    options: nodeOptions
                })
                menuItems.push({
                    label: RED._('sidebar.info.group'),
                    options: [
                        { onselect: 'core:group-selection', label: RED._("menu.label.groupSelection") },
                        { onselect: 'core:ungroup-selection', label: RED._("menu.label.ungroupSelection"), disabled: !hasGroup },
                    ]
                })
                if (hasGroup) {
                    menuItems[menuItems.length - 1].options.push(
                        { onselect: 'core:merge-selection-to-group', label: RED._("menu.label.groupMergeSelection") }
                    )

                }
                if (canRemoveFromGroup) {
                    menuItems[menuItems.length - 1].options.push(
                        { onselect: 'core:remove-selection-from-group', label: RED._("menu.label.groupRemoveSelection") }
                    )
                }
                menuItems[menuItems.length - 1].options.push(
                    null,
                    { onselect: 'core:copy-group-style', label: RED._("keyboard.copyGroupStyle"), disabled: !hasGroup },
                    { onselect: 'core:paste-group-style', label: RED._("keyboard.pasteGroupStyle"), disabled: !hasGroup}
                )
            }
            if (canEdit && hasMultipleSelection) {
                menuItems.push({
                    label: RED._('menu.label.arrange'),
                    options: [
                        { label:RED._("menu.label.alignLeft"), onselect: "core:align-selection-to-left"},
                        { label:RED._("menu.label.alignCenter"), onselect: "core:align-selection-to-center"},
                        { label:RED._("menu.label.alignRight"), onselect: "core:align-selection-to-right"},
                        null,
                        { label:RED._("menu.label.alignTop"), onselect: "core:align-selection-to-top"},
                        { label:RED._("menu.label.alignMiddle"), onselect: "core:align-selection-to-middle"},
                        { label:RED._("menu.label.alignBottom"), onselect: "core:align-selection-to-bottom"},
                        null,
                        { label:RED._("menu.label.distributeHorizontally"), onselect: "core:distribute-selection-horizontally"},
                        { label:RED._("menu.label.distributeVertically"), onselect: "core:distribute-selection-vertically"}
                    ]
                })
            }


            menuItems.push(
                null,
                { onselect: 'core:undo', label: RED._("keyboard.undoChange"), disabled: RED.history.list().length === 0 },
                { onselect: 'core:redo', label: RED._("keyboard.redoChange"), disabled: RED.history.listRedo().length === 0 },
                null,
                { onselect: 'core:cut-selection-to-internal-clipboard', label: RED._("keyboard.cutNode"), disabled: !canEdit || !hasSelection },
                { onselect: 'core:copy-selection-to-internal-clipboard', label: RED._("keyboard.copyNode"), disabled: !hasSelection },
                { onselect: 'core:paste-from-internal-clipboard', label: RED._("keyboard.pasteNode"), disabled: !canEdit || !RED.view.clipboard() },
                { onselect: 'core:delete-selection', label: RED._('keyboard.deleteSelected'), disabled: !canEdit || !canDelete },
                { onselect: 'core:delete-selection-and-reconnect', label: RED._('keyboard.deleteReconnect'), disabled: !canEdit || !canDelete },
            )
            if (RED.settings.theme("menu.menu-item-export-library", true)) {
                menuItems.push(
                    { onselect: 'core:show-export-dialog', label: RED._("menu.label.export") }
                )
            }
            menuItems.push(
                { onselect: 'core:select-all-nodes', label: RED._("keyboard.selectAll") }
            )
        }

        var direction = "right";
        var MENU_WIDTH = 500; // can not use menu width here
        if ((options.x -$(document).scrollLeft()) >
            ($(window).width() -MENU_WIDTH)) {
            direction = "left";
        }

        menu = RED.menu.init({
            direction: direction,
            onpreselect: function() {
                disposeMenu()
            },
            onpostselect: function () {
                RED.view.focus()
            },
            options: menuItems
        });

        menu.attr("id", "red-ui-workspace-context-menu");
        menu.css({
            position: "absolute"
        })
        menu.appendTo("body");

        // TODO: prevent the menu from overflowing the window.

        var top = options.y
        var left = options.x

        if (top + menu.height() - $(document).scrollTop() > $(window).height()) {
            top -= (top + menu.height()) - $(window).height() + 22;
        }
        if (left + menu.width() - $(document).scrollLeft() > $(window).width()) {
            left -= (left + menu.width()) - $(window).width() + 18;
        }
        menu.css({
            top: top + "px",
            left: left + "px"
        })
        $(".red-ui-menu.red-ui-menu-dropdown").hide();
        $(document).on("mousedown.red-ui-workspace-context-menu", function (evt) {
            if (menu && menu[0].contains(evt.target)) {
                return
            }
            disposeMenu()
        });
        menu.show();
        // set focus to first item so that pressing escape key closes the menu
        $("#red-ui-workspace-context-menu :first(ul) > a").trigger("focus")

    }
    // Allow escape key hook and other editor events to close context menu
    RED.keyboard.add("red-ui-workspace-context-menu", "escape", function () { RED.contextMenu.hide() })
    RED.events.on("editor:open", function () { RED.contextMenu.hide() });
    RED.events.on("search:open", function () { RED.contextMenu.hide() });
    RED.events.on("type-search:open", function () { RED.contextMenu.hide() });
    RED.events.on("actionList:open", function () { RED.contextMenu.hide() });
    RED.events.on("view:selection-changed", function () { RED.contextMenu.hide() });
    
    // Initialize the conditional connection system
    $(function() {
        // Load any saved edge conditions
        loadEdgeConditionsFromFlow();
        
        // Set up wiring for conditional connections
        setupConditionalWiring();
        
        // Initialize when flows are deployed
        RED.events.on("deploy", function() {
            // Make sure all links have their conditions applied
            RED.nodes.eachLink(function(link) {
                var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
                if (edgeConditions[linkId]) {
                    updateLinkAppearance(link, edgeConditions[linkId]);
                }
            });
        });
        
        // Add console log to help debug dialog issues
        console.log("Conditional connection system initialized");
    });
    
    // Add this edit connection function to RED namespace for debugging
    RED.editConnection = function(link) {
        if (!link) return;
        
        // Get the link ID
        var linkId = link.source.id + ':' + link.sourcePort + ':' + link.target.id;
        
        // Get or create the condition data
        if (!edgeConditions[linkId]) {
            edgeConditions[linkId] = {
                property: "payload",
                operator: "eq",
                value: "",
                valueType: "str",
                enabled: false,
                useTriplets: true,
                conditions: []
            };
        }
        
        // Make sure we pass a copy of the condition to prevent unintended modifications
        var conditionCopy = JSON.parse(JSON.stringify(edgeConditions[linkId]));
        
        // Show the dialog
        showConnectionDialog(link, conditionCopy);
    };
    
    // Add a global debug function
    window.debugEditConnection = function() {
        console.log("Edit connection debug info:");
        
        // Check if RED.editor and RED.editor.editDialog are defined
        console.log("- RED.editor defined:", typeof RED.editor !== 'undefined');
        console.log("- RED.editor.editDialog defined:", typeof RED.editor.editDialog === 'function');
        
        // Check jQuery and jQuery UI
        console.log("- jQuery defined:", typeof jQuery !== 'undefined');
        console.log("- jQuery UI dialog defined:", typeof jQuery.fn.dialog === 'function');
        
        // Check for any selected links
        var selection = RED.view.selection();
        var wireLinks = (selection && selection.links && selection.links.filter(e => !e.link)) || [];
        console.log("- Selected links:", wireLinks.length);
        
        if (wireLinks.length > 0) {
            var selectedLink = wireLinks[0];
            var linkId = selectedLink.source.id + ':' + selectedLink.sourcePort + ':' + selectedLink.target.id;
            console.log("- Selected link ID:", linkId);
            
            // Try to open the dialog for this link
            console.log("- Attempting to show dialog...");
            try {
                RED.editConnection(selectedLink);
                console.log("- Dialog opened without errors");
            } catch (err) {
                console.error("- Error opening dialog:", err);
            }
        } else {
            console.log("- No links selected. Please select a link first.");
        }
        
        return "Debug complete - check console for details";
    };
    
    return {
        show: show,
        hide: disposeMenu,
        evaluateCondition: evaluateCondition,
        getCondition: function(linkId) {
            return edgeConditions[linkId];
        },
        getAllConditions: function() {
            return edgeConditions;
        },
        editConnection: function(link) {
            RED.editConnection(link);
        }
    }
})()
