/**
 * Node-RED Triplets Node Debug Logger
 * 
 * This script adds debug logging functionality to the Triplets node.
 * It creates a split panel in the property sheet with logs displayed on the right side.
 */

(function() {
    // Wait for document ready
    $(function() {
        // Register a oneditprepare handler for triplets node
        RED.nodes.registerType('triplets', {
            oneditprepare: function() {
                var node = this;
                
                // Add debug enable checkbox to the node configuration
                if ($('#node-input-debugEnabled').length === 0) {
                    var debugRow = $('<div class="form-row"></div>');
                    var debugCheck = $('<input type="checkbox" id="node-input-debugEnabled" style="display:inline-block; width:auto; vertical-align:top;">');
                    var debugLabel = $('<label for="node-input-debugEnabled" style="width:auto">Enable Debug Logging</label>');
                    debugRow.append(debugCheck).append(debugLabel);
                    
                    // Insert after the first form-row
                    $('.form-row').first().after(debugRow);
                    
                    // Set initial state
                    debugCheck.prop('checked', node.debugEnabled || false);
                }
                
                // Create split panel layout
                createSplitLayout();
                
                // Load initial logs
                loadLogs();
                
                // Setup log refresh timer
                var refreshInterval = setInterval(loadLogs, 5000);
                
                // Clear interval when editor is closed
                RED.events.on('editor:close', function() {
                    clearInterval(refreshInterval);
                });
                
                // Add clear logs button
                $('#node-input-logs-clear').on('click', function() {
                    clearLogs();
                });
            },
            
            oneditsave: function() {
                var node = this;
                
                // Save debug enabled state
                node.debugEnabled = $('#node-input-debugEnabled').prop('checked');
            }
        }, {
            // Keep the existing registration
            override: true
        });
        
        // Create split layout with logs panel
        function createSplitLayout() {
            // Only create the layout if it doesn't exist
            if ($('#triplets-property-panels').length === 0) {
                // Create container for split panels
                var container = $('<div id="triplets-property-panels" class="triplets-panels"></div>');
                
                // Create left panel (original properties)
                var leftPanel = $('<div id="triplets-left-panel" class="triplets-panel triplets-left-panel"></div>');
                
                // Create right panel (logs)
                var rightPanel = $('<div id="triplets-right-panel" class="triplets-panel triplets-right-panel"></div>');
                var rightHeader = $('<div class="triplets-panel-header"></div>');
                var rightTitle = $('<span class="triplets-panel-title">Debug Logs</span>');
                var clearButton = $('<button id="node-input-logs-clear" class="editor-button editor-button-small triplets-clear-button">Clear Logs</button>');
                rightHeader.append(rightTitle).append(clearButton);
                
                var logsContainer = $('<div id="node-input-logs-container" class="triplets-logs-container"></div>');
                
                rightPanel.append(rightHeader).append(logsContainer);
                
                // Move existing form rows to left panel
                $('.form-row:not(.node-input-target-row)').appendTo(leftPanel);
                
                // Add both panels to the container
                container.append(leftPanel).append(rightPanel);
                
                // Replace the existing edit form content
                $('#dialog-form').children().wrapAll(container);
                
                // Add event handlers for the clear button
                clearButton.on('click', function(e) {
                    e.preventDefault();
                    clearLogs();
                });
            }
        }
        
        // Load logs from the node
        function loadLogs() {
            var nodeId = $('#node-input-id').val();
            if (nodeId) {
                $.getJSON('triplets/' + nodeId + '/logs', function(logs) {
                    displayLogs(logs);
                }).fail(function() {
                    // If logs not available, display message
                    displayLogs([{
                        timestamp: new Date().toISOString(),
                        message: "No logs available or debug logging is disabled",
                        data: null
                    }]);
                });
            }
        }
        
        // Display logs in the right panel
        function displayLogs(logs) {
            var logsContainer = $('#node-input-logs-container');
            logsContainer.empty();
            
            if (logs && logs.length > 0) {
                var logList = $('<div class="triplets-log-list"></div>');
                
                logs.forEach(function(log) {
                    // Create log entry
                    var logEntry = $('<div class="triplets-log-entry"></div>');
                    
                    // Format timestamp
                    var timestamp = new Date(log.timestamp);
                    var timeString = timestamp.toLocaleTimeString() + '.' + String(timestamp.getMilliseconds()).padStart(3, '0');
                    
                    // Create header with timestamp
                    var logHeader = $('<div class="triplets-log-header"></div>');
                    var timeLabel = $('<span class="triplets-log-time">' + timeString + '</span>');
                    logHeader.append(timeLabel);
                    
                    // Create message content
                    var logMessage = $('<div class="triplets-log-message">' + log.message + '</div>');
                    
                    // Add data if available
                    if (log.data) {
                        var dataString;
                        try {
                            if (typeof log.data === 'string') {
                                dataString = log.data;
                            } else {
                                dataString = JSON.stringify(log.data, null, 2);
                            }
                            var logData = $('<pre class="triplets-log-data">' + dataString + '</pre>');
                            logEntry.append(logHeader).append(logMessage).append(logData);
                        } catch (e) {
                            logEntry.append(logHeader).append(logMessage);
                        }
                    } else {
                        logEntry.append(logHeader).append(logMessage);
                    }
                    
                    logList.append(logEntry);
                });
                
                logsContainer.append(logList);
            } else {
                logsContainer.text('No logs available');
            }
        }
        
        // Clear logs function
        function clearLogs() {
            var nodeId = $('#node-input-id').val();
            if (nodeId) {
                $.ajax({
                    url: 'triplets/' + nodeId + '/clearLogs',
                    type: 'POST',
                    success: function() {
                        $('#node-input-logs-container').empty().text('Logs cleared');
                    },
                    error: function() {
                        $('#node-input-logs-container').empty().text('Error clearing logs');
                    }
                });
            }
        }
    });
})(); 